#!/bin/bash -l

# A script to provide a list of modules, versions and the associated "module
# whatis" statements (if any) to the NeSI documentation server from a
# somewhat arbitrary NeSI cluster.

# Set some possible exit statuses suitable for nagios/icinga.
# Note that at the moment we use cron instead, so although this is
# superfluous it's not entirely bad.
ok=0
warning=1
critical=2
unknown=3

# Get some configuration information from the local machine, etc.
progname=$(basename $0)
certdir=$( cd "$( dirname "$( readlink -f "${BASH_SOURCE[0]}" )" )" && pwd )
export PATH="${certdir}:${PATH}"
curl_exe=$(which curl)
server="docs.nesi.org.nz"

# Get command line arguments
ARGS=$(getopt -o c:dn -l "certificate-dir:,debug,nagios" -n "${progname}" -- "$@");

#Bad arguments
if [ $? -ne 0 ]
then
	exit $critical
fi

eval set -- "$ARGS";

debug=false
nagios=false
while true
do
	case "$1" in
	-c|--certificate-dir)
		shift
		if [ -n "$1" ]
		then
			certdir=$1
			shift
		fi
		;;
	-d|--debug)
		shift
		debug=true
		;;
	-n|--nagios)
		shift
		nagios=true
		;;
	--)
		shift
		break
		;;
	esac
done

# Set some parameters based on where this script is being run
uchpc=false
long_hostname=$(hostname)
case ${long_hostname} in
login-01.uoa.nesi.org.nz)
	localhost="pan"
	machines="pan"
	;;
nesi1)
	localhost="fitzroy"
	machines="fitzroy"
	export http_proxy="http://www-proxy.niwa.co.nz:80"
	export https_proxy="https://www-proxy.niwa.co.nz:80"
	;;
*)
	echo "Unknown hostname: ${long_hostname}" 1>&2
	exit $critical
	;;
esac

# Make sure the specified certificate directory exists and that we have an
# appropriate key file inside that directory
if [ ! -d "${certdir}" ]
then
	echo "${certdir}: not a directory" 1>&2
	exit $critical
elif [ ! -f "${certdir}/${localhost}.key" ]
then
	echo "${certdir}/${localhost}.key: not a file" 1>&2
	exit $critical
fi

# Determine whether, on this machine, environment-modules or LMOD is being
# used.
# Note that we assume gratuitously that all machines in the list of machines
# have the same style (environment-modules or LMOD) as is used on this
# machine.
type=$(type module | tail -n +3)
if [ $? -ne 0 ]
then
	echo "Neither Lmod nor Environment Modules could be detected" 1>&2
	exit $critical
fi
lmod=false
case "${type}" in
*LMOD* )
	lmod=true
	;;
*modulecmd*)
	true
	;;
*)
	modulecmd_exe=$(which modulecmd)
	if [ $? -ne 0 ]
	then
		echo "Neither Lmod nor Environment Modules could be detected" 1>&2
		exit $critical
	else
		function module () 
		{ 
			eval `"${modulecmd_exe}" bash $*`
		}
	fi
	;;
esac

# Do a quick check to make sure we can actually connect to the documentation
# server.
{ ${curl_exe} -s -S --sslv3 \
	--cacert ${certdir}/docs.pem --cert ${certdir}/${localhost}.pem \
	--key ${certdir}/${localhost}.key \
	https://${server}:443/${localhost} > /dev/null ; } || \
{ echo "Unable to connect to documentation server" 1>&2 ; exit $critical ; }

# Set the home directory.
home_dir=$(eval echo ~)

# For each machine, set an output file (in the home directory on this
# machine), prepare a command based on where we are running and LMOD versus
# environment-modules, and run the command, uploading a file.
for machine in ${machines}
do

	output_file="${home_dir}/modules-${machine}-$$.txt"
	rm -rf "${output_file}"

	if [ "${lmod}" = true ]
	then
		module_list=$(module avail -t 2>&1 | grep -v ':$')
		command="for mod in ${module_list} ; do desc=\$(module whatis \${mod} 2>&1); echo "\${desc}"; done"
	else
		command="module whatis -t 2>&1"
	fi
	eval ${command} | \
		sed -e 's/:\s\+Description:/:/' | \
		grep ': ' | \
		grep -v ":ERROR:" | \
		grep -Ev "[Nn]ot (supported|available)" | \
		grep -v "only available" | \
		sed -e 's/\s\+/ /' | \
		sed -e '/^\s*$/d' \
		> "${output_file}"
	${curl_exe} -s -S --sslv3 --cacert ${certdir}/docs.pem --cert ${certdir}/${localhost}.pem --key ${certdir}/${localhost}.key https://docs.nesi.org.nz:443/${machine} -F myfile=@${output_file}
	if [ "${debug}" = true ]
	then
		heading="Module list for $machine"
		len=${#heading}
		echo "${heading}"
		for i in $(seq ${len})
		do
			echo -n "-"
		done
		echo ""
		cat "${output_file}"
	fi
	rm ${output_file}
	if [ "${nagios}" = true ]
	then
		echo "Module lists for documentation purposes have been successfully updated."
	fi
done

exit $ok
